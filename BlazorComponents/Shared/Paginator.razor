<nav >
  <ul class="pagination mb-0">
    <li class="page-item @(FirstDisabled || HttpLoading ? "disabled" : "")">
      <span class="page-link pointer" @onclick="@(() => SetCurrentPage(0))">First</span>
    </li>

    @if (NumberOfPages == 0)
    {
        <li class="page-item disabled"><a class="page-link" >1</a></li>
    }else
    {
        @foreach(var pageNo in Enumerable.Range(0, NumberOfPages.HasValue ? NumberOfPages.Value : 0))
        {
            <li class="page-item @(CurrentPage == pageNo ? "active" : "") @(HttpLoading ? "disabled" : "")"><span class="page-link pointer" @onclick="@(() => SetCurrentPage(pageNo))">@(pageNo + 1)</span></li>
        }
    }
        

    <li class="page-item @(LastDisabled || HttpLoading ? "disabled" : "")">
      <span class="page-link pointer" @onclick="@(() => SetCurrentPage(NumberOfPages.HasValue ? NumberOfPages.Value - 1 : 0))">Last</span>
    </li>
  </ul>
</nav>

@code {
    [Parameter]
    public int? CurrentPage { get; set; }

    [Parameter]
    public int? PageSize { get; set; }

    [Parameter]
    public int? TotalNumberOfRows { get; set; }

    [Parameter]
    public EventCallback<int?> OnPageChange { get; set; }

    [Parameter]
    public bool HttpLoading { get; set; }

    private int? NumberOfPages { get; set; }
    public bool FirstDisabled { get; set; }
    public bool LastDisabled { get; set; }

    protected override void OnParametersSet()
    {
        SetPaginationData();
        base.OnParametersSet();
    }

    private void SetPaginationData()
    {
        NumberOfPages = TotalNumberOfRows / PageSize;
        FirstDisabled = CurrentPage == 0;
        LastDisabled = CurrentPage == NumberOfPages;
    }

    private async Task SetCurrentPage(int page)
    {
        if (HttpLoading)
            return;

        CurrentPage = page;
        SetPaginationData();
        await OnPageChange.InvokeAsync(page);
    }
}
